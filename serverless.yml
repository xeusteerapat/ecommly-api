service:
  name: ecommly-api

plugins:
  - serverless-webpack
  - serverless-stage-manager
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'develop'}
  region: ${opt:region, 'ap-southeast-1'}
  environment:
    REGION: ${self:provider.region}
    IMAGES_BUCKET_NAME: ecommly-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    PRODUCTS_TABLE: Products-${self:provider.stage}
    ORDERS_TABLE: Orders-${self:provider.stage}
    TEST_SECRET: ${self:custom.TEST_SECRET}
    USER_POOL_ID: ${self:custom.USER_POOL_ID}
    USER_POOL_CLIENT_ID: ${self:custom.USER_POOL_CLIENT_ID}
    ADMIN_GROUP: Admin-${self:provider.stage}
    CUSTOMER_GROUP: Customer-${self:provider.stage}
  tracing:
    apiGateway: true
    lambda: true

custom:
  stages:
    - develop
    - production
  TEST_SECRET: ${ssm:test-${self:provider.stage}-secret}
  USER_POOL_ID: ${ssm:userpool-${self:provider.stage}-id}
  USER_POOL_CLIENT_ID: ${ssm:client-${self:provider.stage}-id}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Ecommly API
        description: Serverless Ecommerce Application
    models:
      - name: "CreateProductRequest"
        contentType: application/json
        schema: ${file(request-validators/create-product-request.json)}
      - name: "UpdateProductRequest"
        contentType: application/json
        schema: ${file(request-validators/update-product-request.json)}
      - name: "CreateOrderRequest"
        contentType: application/json
        schema: ${file(request-validators/create-order-request.json)}

functions:
  hello:
    handler: src/lambda/hello.handler
    events:
      - http:
          method: get
          path: hello
  # Authentication
  signup:
    handler: src/lambda/auth/signup.handler
    events:
      - http:
          method: post
          path: signup
  signin:
    handler: src/lambda/auth/signin.handler
    events:
      - http:
          method: post
          path: signin
  postConfirmed:
    handler: src/lambda/auth/postConfirmed.handler
    events:
      - http:
          method: post
          path: confirmed
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminAddUserToGroup
        Resource: "*"
  # Products
  products:
    handler: src/lambda/products/getProducts.handler
    events:
      - http:
          method: get
          path: products
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}
  productsById:
    handler: src/lambda/products/getProductById.handler
    events:
      - http:
          method: get
          path: products/{productId}
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}
  createProduct:
    handler: src/lambda/products/createProduct.handler
    events:
      - http:
          method: post
          path: products
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create new product
            requestModels:
              "application/json": CreateProductRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}
  updateProduct:
    handler: src/lambda/products/updateProduct.handler
    events:
      - http:
          method: put
          path: products/{productId}
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an existing product
            requestModels:
              "application/json": UpdateProductRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}
  deleteProduct:
    handler: src/lambda/products/deleteProduct.handler
    events:
      - http:
          method: delete
          path: products/{productId}
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}
  # Order
  createOrder:
    handler: src/lambda/orders/createOrder.handler
    events:
      - http:
          method: post
          path: orders
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create new order
            requestModels:
              "application/json": CreateOrderRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ORDERS_TABLE}
  getOrdersByUserId:
    handler: src/lambda/orders/getOrders.handler
    events:
      - http:
          method: get
          path: orders
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ORDERS_TABLE}
  getOrderById:
    handler: src/lambda/orders/getOrderById.handler
    events:
      - http:
          method: get
          path: orders/{orderId}
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ORDERS_TABLE}
  # Images
  uploadImage:
    handler: src/lambda/images/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: products/{productId}/upload
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET_NAME}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}

resources:
  Resources: ${file(./src/resources/resources.yml)}
