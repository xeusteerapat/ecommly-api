# Products table
productsTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: "productId"
        AttributeType: "S"
    BillingMode: "PAY_PER_REQUEST"
    KeySchema:
      - AttributeName: "productId"
        KeyType: "HASH"
    TableName: ${self:provider.environment.PRODUCTS_TABLE}
    Tags:
      - Key: Name
        Value: products-table

# Orders table
ordersTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: "userId" # we can lookup all the orders by userId
        AttributeType: "S"
      - AttributeName: "orderId"
        AttributeType: "S"
      - AttributeName: "productId"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "S"
    BillingMode: "PAY_PER_REQUEST"
    KeySchema:
      - AttributeName: "userId"
        KeyType: "HASH"
      - AttributeName: "orderId"
        KeyType: "RANGE"
    GlobalSecondaryIndexes: # we need global secondary index to query by productId
      - IndexName: "byOrder"
        KeySchema:
          - AttributeName: "productId"
            KeyType: "HASH"
          - AttributeName: "createdAt"
            KeyType: "RANGE"
        Projection:
          ProjectionType: ALL
    TableName: ${self:provider.environment.ORDERS_TABLE}
    Tags:
      - Key: Name
        Value: orders-table

# Cognito User pool
cognitoUserPool:
  Type: AWS::Cognito::UserPool
  Properties:
    UsernameAttributes:
      - email
    UserPoolName: ecommly-userpool-${self:provider.stage}

# Cognito User Pool Client
cognitoUserPoolClient:
  Type: AWS::Cognito::UserPoolClient
  Properties:
    ClientName: Web-${self:provider.stage}-client
    UserPoolId: !Ref cognitoUserPool # refer to cognito user pool as above which returns user-pool-id

# Cognito User Pool Group (Admin)
cognitoAdminGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: "Admin users belongs to this group"
    GroupName: Admin-${self:provider.stage}
    Precedence: 0 # Highest priority
    RoleArn: !GetAtt cognitoAdminIAMRole.Arn
    UserPoolId: !Ref cognitoUserPool

# Cognito Admin IAM Role
cognitoAdminIAMRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal: # specify who can assume this role
            Federated:
              - "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRoleWithWebIdentity"
    Description: "This is IAM Role that admin group users assume"
    Policies:
      - PolicyName: ecommly-admin-group-policy-${self:provider.stage}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:*"
              Resource:
                - !GetAtt productsTable.Arn
                - !GetAtt ordersTable.Arn
            - Effect: Allow
              Action:
                - "lambda:InvokeFunction"
                - cognito-idp:AdminAddUserToGroup
              Resource: "*"
    RoleName: ecommly-admin-role-${self:provider.stage}

# Cognito User Pool Group (Customer)
cognitoCustomerGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: "Customers users belongs to this group"
    GroupName: Customer-${self:provider.stage}
    Precedence: 1
    RoleArn: !GetAtt cognitoCustomerIAMRole.Arn
    UserPoolId: !Ref cognitoUserPool

# Cognito Customer IAM Role
cognitoCustomerIAMRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal: # specify who can assume this role
            Federated:
              - "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRoleWithWebIdentity"
    Description: "This is IAM Role that customer group users assume"
    Policies:
      - PolicyName: ecommly-customer-group-policy-${self:provider.stage}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:*"
              Resource:
                - !GetAtt ordersTable.Arn # customer can only create order
            - Effect: Allow
              Action:
                - "dynamodb:GetItem"
                - "dynamodb:Query"
                - "dynamodb:BatchGetItem"
              Resource:
                - !GetAtt productsTable.Arn # customer can only create order
            - Effect: Allow
              Action:
                - "lambda:InvokeFunction"
                - cognito-idp:AdminAddUserToGroup
              Resource: "*"
    RoleName: ecommly-customer-role-${self:provider.stage}

GatewayResourceDefault4XX:
  Type: AWS::ApiGateway::GatewayResponse
  Properties:
    ResponseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH,PUT'"
    ResponseType: DEFAULT_5XX
    RestApiId:
      Ref: ApiGatewayRestApi

# API Gateway AUthorizer
ApiGatewayAuthorizer:
  DependsOn:
    - ApiGatewayRestApi
  Type: AWS::ApiGateway::Authorizer
  Properties:
    Name: cognito-authorizer-${self:provider.stage}
    IdentitySource: method.request.header.Authorization
    RestApiId:
      Ref: ApiGatewayRestApi
    Type: COGNITO_USER_POOLS
    ProviderARNs:
      - Fn::GetAtt: [cognitoUserPool, Arn]

RequestBodyValidator:
  Type: AWS::ApiGateway::RequestValidator
  Properties:
    Name: "request-body-validator"
    RestApiId:
      Ref: ApiGatewayRestApi
    ValidateRequestBody: true
    ValidateRequestParameters: false

# Image Bucket
AttachmentsBucket:
  Type: AWS::S3::Bucket
  Properties:
    BucketName: ${self:provider.environment.IMAGES_BUCKET_NAME}
    CorsConfiguration:
      CorsRules:
        - AllowedOrigins:
            - "*"
          AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - POST
            - DELETE
            - HEAD
          MaxAge: 3000

BucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref AttachmentsBucket
    PolicyDocument:
      Id: MyPolicy
      Version: "2012-10-17"
      Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: "*"
          Action: "s3:GetObject"
          Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET_NAME}/*"
